{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to OpsMx Documentation In this documentation, we will learn about the different products of OpsMx which helps to make your product release process smooth and hassle free. In the upcoming sections, we will learn about the installation process and also how to use the different features of the products in detail. The products are as follows: OpsMx Intelligent Software Delivery Platform Orchestration Module - OpsMx Enterprise for Spinnaker (OES) Data and Intelligence Module - Autopilot","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#welcome-to-opsmx-documentation","text":"In this documentation, we will learn about the different products of OpsMx which helps to make your product release process smooth and hassle free. In the upcoming sections, we will learn about the installation process and also how to use the different features of the products in detail. The products are as follows: OpsMx Intelligent Software Delivery Platform Orchestration Module - OpsMx Enterprise for Spinnaker (OES) Data and Intelligence Module - Autopilot","title":"Welcome to OpsMx Documentation"},{"location":"Application%20Dashboard/","text":"Application Dashboard The application dashboard helps you to get a complete detailed view of the applications along with its services and pipelines. In the application dashboard you can also view the environments and the gates that the service or the application passes through before final deployment. You can also view the details of the deployment. Click \"Dashboard\" and click \"Application Dashboard\" Summary View In the above dashboard, the first view is the summary view where you can see there are different applications with the following details: Total Applications - The number of services in the application Deployments - The deployment details Pending Approvals - Any approvals which are pending Policy Violations - Any policy violations Verification Failures - Any failures in verification process Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Title of the document table, th, td { padding: 2px; border: 1px solid black; border-collapse: collapse; } Cloud Driver Deck API Caller Gate Orca Gate Gate Roscoe Orca Front50 Orca Cloud Driver Roscoe Cloud Driver Front50 Igor Front50 Roscoe Orca Igor Igor Cloud Driver Gate","title":"Application Dashboard"},{"location":"Application%20Dashboard/#application-dashboard","text":"The application dashboard helps you to get a complete detailed view of the applications along with its services and pipelines. In the application dashboard you can also view the environments and the gates that the service or the application passes through before final deployment. You can also view the details of the deployment. Click \"Dashboard\" and click \"Application Dashboard\"","title":"Application Dashboard"},{"location":"Application%20Dashboard/#summary-view","text":"In the above dashboard, the first view is the summary view where you can see there are different applications with the following details: Total Applications - The number of services in the application Deployments - The deployment details Pending Approvals - Any approvals which are pending Policy Violations - Any policy violations Verification Failures - Any failures in verification process Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Total Applications - The number of services in the application Title of the document table, th, td { padding: 2px; border: 1px solid black; border-collapse: collapse; } Cloud Driver Deck API Caller Gate Orca Gate Gate Roscoe Orca Front50 Orca Cloud Driver Roscoe Cloud Driver Front50 Igor Front50 Roscoe Orca Igor Igor Cloud Driver Gate","title":"Summary View"},{"location":"Autopilot%20Installation%20Steps/","text":"Autopilot Installation Steps Following are the steps to install Autopilot. Download yaml file from the Enterprise Spinnaker repository in the GitHub $ wget https://raw.githubusercontent.com/OpsMx/enterprise-spinnaker/ oes3.10/charts/oes/values-APforOSS.yaml Update Autopilot UI and Autopilot Gate entries # Autopilot UI URL configuration oesUI: host: << AUTOPILOT UI URL Example autopilot.opsmx.net >> # Autopilot Gate URL configuration oesGate: host: << AUTOPILOT GATE URL Example autopilot-gate.opsmx.net >> Update Spinnaker Deck URL in dashboard section of values-APforOSS.yaml #Dashboard Service dashboard: config: spinnakerLink: <<SPINNAKER DECK URL Example spinaker.opsmx.net>>","title":"Autopilot Installation Steps"},{"location":"Autopilot%20Installation%20Steps/#autopilot-installation-steps","text":"Following are the steps to install Autopilot. Download yaml file from the Enterprise Spinnaker repository in the GitHub $ wget https://raw.githubusercontent.com/OpsMx/enterprise-spinnaker/ oes3.10/charts/oes/values-APforOSS.yaml Update Autopilot UI and Autopilot Gate entries # Autopilot UI URL configuration oesUI: host: << AUTOPILOT UI URL Example autopilot.opsmx.net >> # Autopilot Gate URL configuration oesGate: host: << AUTOPILOT GATE URL Example autopilot-gate.opsmx.net >> Update Spinnaker Deck URL in dashboard section of values-APforOSS.yaml #Dashboard Service dashboard: config: spinnakerLink: <<SPINNAKER DECK URL Example spinaker.opsmx.net>>","title":"Autopilot Installation Steps"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/","text":"Data and Intelligence Module - Autopilot OpsMx Autopilot is the intelligence layer for Software Delivery, it provides real-time analytics to automate data-driven risk assessments for software releases. Autopilot analyzes the risk of all changes, automatically determining the confidence that an update can be promoted to the next pipeline stage without introducing errors. Autopilot also automated policy compliance, ensuring that all your governance rules and best practices are followed. Autopilot reduces errors in production, increases release velocity, and improves security, quality, and compliance. Overview With Autopilot you get: 1. Automated Verification: Reduce software risks by analysing logs and metrics at every stage of CI/CD process. Determine the risk of every update before deploying to production. Automatically analyse data from dynamic and static scans, functional tests, metrics, and logs to identify and highlight anomalies that should be considered before approval. 2. Continuous Governance and Security: Mitigate risk and vulnerabilities by security and policy enforcement in software delivery pipelines. Provides comprehensive policy enforcement through an extensible policy engine that ensures compliance to industry standards and organizational policies while securely shipping your releases faster to production. 3. Automated Approvals: Make faster and informed decisions to approve a delivery pipeline by 360\u00b0 visibility of your CI/CD process. Perform informed application approval or promotion between different stages of software delivery (from QA to Staging & from staging to Production) through real-time information about the release, including source code changes, build information, source code analysis, SAST/DAST tool analysis, risk verifications, and policy checks. 4. Observability, Traceability and Insights: Collaborate more and make better decisions using real-time visibility and deep insights across your software deployments and delivery. Supports real-time Observability with respect to deployments and pipeline execution and traceability for all software delivery events, including what is getting delivered, who approved the release, and when it was approved.","title":"Data and Intelligence Module   Autopilot"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#data-and-intelligence-module-autopilot","text":"OpsMx Autopilot is the intelligence layer for Software Delivery, it provides real-time analytics to automate data-driven risk assessments for software releases. Autopilot analyzes the risk of all changes, automatically determining the confidence that an update can be promoted to the next pipeline stage without introducing errors. Autopilot also automated policy compliance, ensuring that all your governance rules and best practices are followed. Autopilot reduces errors in production, increases release velocity, and improves security, quality, and compliance.","title":"Data and Intelligence Module - Autopilot"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#overview","text":"With Autopilot you get:","title":"Overview"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#1-automated-verification","text":"Reduce software risks by analysing logs and metrics at every stage of CI/CD process. Determine the risk of every update before deploying to production. Automatically analyse data from dynamic and static scans, functional tests, metrics, and logs to identify and highlight anomalies that should be considered before approval.","title":"1. Automated Verification:"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#2-continuous-governance-and-security","text":"Mitigate risk and vulnerabilities by security and policy enforcement in software delivery pipelines. Provides comprehensive policy enforcement through an extensible policy engine that ensures compliance to industry standards and organizational policies while securely shipping your releases faster to production.","title":"2. Continuous Governance and Security:"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#3-automated-approvals","text":"Make faster and informed decisions to approve a delivery pipeline by 360\u00b0 visibility of your CI/CD process. Perform informed application approval or promotion between different stages of software delivery (from QA to Staging & from staging to Production) through real-time information about the release, including source code changes, build information, source code analysis, SAST/DAST tool analysis, risk verifications, and policy checks.","title":"3. Automated Approvals:"},{"location":"Data%20and%20Intelligence%20Module%20-%20Autopilot/#4-observability-traceability-and-insights","text":"Collaborate more and make better decisions using real-time visibility and deep insights across your software deployments and delivery. Supports real-time Observability with respect to deployments and pipeline execution and traceability for all software delivery events, including what is getting delivered, who approved the release, and when it was approved.","title":"4. Observability, Traceability and Insights:"},{"location":"ISD_Installation_Guide/","text":"ISD Installation Guide Introduction This document provides the step-by-step instructions for installing ISD on a kubernetes cluster. Some basic knowledge of command-line interface is required. Before you start, it might be helpful to go through these documents: Routing Web URLs to ISD services - Refer here ISD On-Prem POV Infrastructure requirements - Refer here ISD - Commonly used Commands - Refer here ISD Service Catalogue - Refer here Pre-requisites A laptop/machine being used to install that has the required software mentioned here A kubeconfig file to access the kubernetes cluster A working \u201ckubectl\u201d command. Execute the command below: kubectl get no to see the nodes kubectl get ns to see the namespaces These commands should show some output. If required, rename the kubeconfig file as \"config\" and copy to .kube folder in your machine A github repo, and a \u201cpersonal access token\u201d. Instructions for creating these can be found here. NGINX Ingress Controller and cert-manager(if using https) in the cluster. Installation steps Setup URLs Host names that will be used to access ISD: Three host-names are required as mentioned below: oes. .company.com spin. .company.com oes-gate. .company.com Run the following command to get the IP address of the ingress controller kubectl get ingress -n ingress-nginx Prepare gitops repo Prepare your gitops repository as follows: 1.Create a working directory in your local system ``` mkdir opsmx - isd # create a working directory for your installation ``` 2.Clone standard-gitops-repo repository from appropriate branch `git clone https://github.com/OpsMx/standard-gitops-repo.git -b 3.10` 3.Clone your gitops repo using the following command: git clone https : // github . com /< your - id >/< gitops - repo > For Example : git clone https : // github . com / ravigorremuchu / oes - repo . git 4.Copy files from standard-gitops-repo to your gitops repo cp -R ./standard-gitops-repo/config ./<gitops-repo>/config cp -R ./standard-gitops-repo/halyard.yaml ./<oes-repo>/halyard.yaml cp -R ./standard-gitops-repo/default ./<oes-repo>/default cp -R ./standard-gitops-repo/SAMPLES ./<oes-repo>/SAMPLES 5.Push the changes back to the githup repo cd <oes-repo> git add -A git commit -m \u201cOpsmx standard gitops repo\u201d git push","title":"ISD_Installation_Guide"},{"location":"ISD_Installation_Guide/#isd-installation-guide","text":"","title":"ISD Installation Guide"},{"location":"ISD_Installation_Guide/#introduction","text":"This document provides the step-by-step instructions for installing ISD on a kubernetes cluster. Some basic knowledge of command-line interface is required. Before you start, it might be helpful to go through these documents: Routing Web URLs to ISD services - Refer here ISD On-Prem POV Infrastructure requirements - Refer here ISD - Commonly used Commands - Refer here ISD Service Catalogue - Refer here","title":"Introduction"},{"location":"ISD_Installation_Guide/#pre-requisites","text":"A laptop/machine being used to install that has the required software mentioned here A kubeconfig file to access the kubernetes cluster A working \u201ckubectl\u201d command. Execute the command below: kubectl get no to see the nodes kubectl get ns to see the namespaces These commands should show some output. If required, rename the kubeconfig file as \"config\" and copy to .kube folder in your machine A github repo, and a \u201cpersonal access token\u201d. Instructions for creating these can be found here. NGINX Ingress Controller and cert-manager(if using https) in the cluster.","title":"Pre-requisites"},{"location":"ISD_Installation_Guide/#installation-steps","text":"","title":"Installation steps"},{"location":"ISD_Installation_Guide/#setup-urls","text":"Host names that will be used to access ISD: Three host-names are required as mentioned below: oes. .company.com spin. .company.com oes-gate. .company.com Run the following command to get the IP address of the ingress controller kubectl get ingress -n ingress-nginx","title":"Setup URLs"},{"location":"ISD_Installation_Guide/#prepare-gitops-repo","text":"Prepare your gitops repository as follows: 1.Create a working directory in your local system ``` mkdir opsmx - isd # create a working directory for your installation ``` 2.Clone standard-gitops-repo repository from appropriate branch `git clone https://github.com/OpsMx/standard-gitops-repo.git -b 3.10` 3.Clone your gitops repo using the following command: git clone https : // github . com /< your - id >/< gitops - repo > For Example : git clone https : // github . com / ravigorremuchu / oes - repo . git 4.Copy files from standard-gitops-repo to your gitops repo cp -R ./standard-gitops-repo/config ./<gitops-repo>/config cp -R ./standard-gitops-repo/halyard.yaml ./<oes-repo>/halyard.yaml cp -R ./standard-gitops-repo/default ./<oes-repo>/default cp -R ./standard-gitops-repo/SAMPLES ./<oes-repo>/SAMPLES 5.Push the changes back to the githup repo cd <oes-repo> git add -A git commit -m \u201cOpsmx standard gitops repo\u201d git push","title":"Prepare gitops repo"},{"location":"Installing%20Autopilot/","text":"Installing Autopilot If you are already using Open Source Spinnaker, then Autopilot can get seamlessly integrated with your Open Source Spinnaker and you get the all the benefits of Autopilot product. The following section defines the procedure for installing Autopilot as a standalone module to work with Open Source Spinnaker. Prerequisites Have access to public repositories in docker.io and quay.io Have the following tools installed - wget, kubectl, helm Have access to a Kubernetes cluster with at least 2 nodes, each node having 8 CPU and 32 GB RAM Have the NGINX Ingress Controller installed in the cluster. If it is not already installed, then you can install the same using the following instructions 4.1. kubectl create ns ingress-nginx 4.2. helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx 4.3. helm repo update 4.4. helm install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx 4.5. kubectl get svc -n ingress-nginx Have \u201ccert-manager\u201d already available in the cluster. If it is not already available, then you can install it using the following instructions 5.1. kubectl create namespace cert-manager 5.2. helm repo add jetstack https://charts.jetstack.io 5.3. helm repo update 5.4. helm install cert-manager jetstack/cert-manager --set installCRDs=true -n cert-manager In the Kubernetes cluster, have 3 Persistent Volumes of size 10GB each Two DNS records pointing to the IP of the Ingress Controller for the following: \u201cAutopilot UI\u201d, Eg. autopilot.opsmx.net \u201cAutopilot Gate\u201d, Eg. autopilot-gate.opsmx.net","title":"Installing Autopilot"},{"location":"Installing%20Autopilot/#installing-autopilot","text":"If you are already using Open Source Spinnaker, then Autopilot can get seamlessly integrated with your Open Source Spinnaker and you get the all the benefits of Autopilot product. The following section defines the procedure for installing Autopilot as a standalone module to work with Open Source Spinnaker.","title":"Installing Autopilot"},{"location":"Installing%20Autopilot/#prerequisites","text":"Have access to public repositories in docker.io and quay.io Have the following tools installed - wget, kubectl, helm Have access to a Kubernetes cluster with at least 2 nodes, each node having 8 CPU and 32 GB RAM Have the NGINX Ingress Controller installed in the cluster. If it is not already installed, then you can install the same using the following instructions 4.1. kubectl create ns ingress-nginx 4.2. helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx 4.3. helm repo update 4.4. helm install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx 4.5. kubectl get svc -n ingress-nginx Have \u201ccert-manager\u201d already available in the cluster. If it is not already available, then you can install it using the following instructions 5.1. kubectl create namespace cert-manager 5.2. helm repo add jetstack https://charts.jetstack.io 5.3. helm repo update 5.4. helm install cert-manager jetstack/cert-manager --set installCRDs=true -n cert-manager In the Kubernetes cluster, have 3 Persistent Volumes of size 10GB each Two DNS records pointing to the IP of the Ingress Controller for the following: \u201cAutopilot UI\u201d, Eg. autopilot.opsmx.net \u201cAutopilot Gate\u201d, Eg. autopilot-gate.opsmx.net","title":"Prerequisites"},{"location":"Observability/","text":"Observability The application observability dashboard is a crucial challenge for DevOps engineers, SRE, DevSecOps, and engineering managers. The dashboard provides in-depth information about the application and services managed by the platform. Users can observe details about current deployment across all environments (Dev, QA, Staging, and Productions) and past deployments. This feature allows users to collaborate more and make better decisions using real-time visibility and deep insights across the software deployments and delivery. It supports real-time observability with respect to deployments and pipeline execution and traceability for all software delivery events, including what is getting delivered, who approved the release, and when it was approved. Following are the key benefits of the observability feature: Identify and remove bottlenecks in all your pipelines through customizable Application and Delivery dashboards. Improve security by rapidly tracing the use of any artifact that has vulnerabilities or other issues. Share best practices and identify problem areas across your entire software delivery environment. Enable developers to monitor applications during and after deployment to production, with the ability to detect issues and request for rollback quickly to avoid disruptions. Get a high-level view of thousands of pipelines through a single-dashboard to ensure that it is operational feasible and receive diagnosis based on historical information.","title":"Observability"},{"location":"Observability/#observability","text":"The application observability dashboard is a crucial challenge for DevOps engineers, SRE, DevSecOps, and engineering managers. The dashboard provides in-depth information about the application and services managed by the platform. Users can observe details about current deployment across all environments (Dev, QA, Staging, and Productions) and past deployments. This feature allows users to collaborate more and make better decisions using real-time visibility and deep insights across the software deployments and delivery. It supports real-time observability with respect to deployments and pipeline execution and traceability for all software delivery events, including what is getting delivered, who approved the release, and when it was approved. Following are the key benefits of the observability feature: Identify and remove bottlenecks in all your pipelines through customizable Application and Delivery dashboards. Improve security by rapidly tracing the use of any artifact that has vulnerabilities or other issues. Share best practices and identify problem areas across your entire software delivery environment. Enable developers to monitor applications during and after deployment to production, with the ability to detect issues and request for rollback quickly to avoid disruptions. Get a high-level view of thousands of pipelines through a single-dashboard to ensure that it is operational feasible and receive diagnosis based on historical information.","title":"Observability"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/","text":"OpsMx Intelligent Software Delivery Platform OpsMx ISD OpsMx\u2019s ISD is designed to help release software faster, with fewer errors and with minimal human intervention to create a better end customer experience and free up time and Manpower for businesses to scale and Innovate. ISD allows you to do the following: Build Flexible deployment pipelines for multiple cloud environments Increase compliance and communication across your development and operations teams Automate key stages of pipelines Make more informed decisions Build Flexible deployment pipelines for multiple cloud environments: Using ISD\u2019s Orchestration Module, OpsMx builds off of Spinnaker, the premier open source multi cloud deployment solution, by providing users with extra layers of data and information to make better decisions. For example, Spinnaker does not have clear distinctions between the application and the various services and microservices that make up that application. ISD however allows users to easily see the various services and microservices that make up each application and the pipelines that make up each individual service and microservice. This allows you to easier see dependencies between service pipelines and as a result help you optimize your workflow. Whether used as an On-prem or a Managed SaaS solution, the orchestration module offers a host of other features like: Self Service onboarding: ISD allows users to serve themselves whether it is adding a new tool, cluster or pipeline, ISD allows users to serve themselves. Pipelines as code: While Spinnaker gives users visual representations of your pipelines so that you can see how your deployment stages might playout, ISD allows you to maintain your pipelines as JSON files which allows you to easily store them as, modify them and repurpose them using any Git-based repository, saving your team time and your business money. Infrastructure as code: As customers demand more from their CI/CD tools, the infrastructure has to be able to scale to meet those requirements. ISD allows you to use tools like Terraform to have your infrastructure like Servers available as code. This allows you to easily scale your application and, as a result, your business without having to worry as much about infrastructure costs. Increase compliance and communication across your development and operations teams: Using our Pluggable data layer, ISD supports over 40+ integrations with various tools that cover each and every stage of software development and operation no matter your team size or work flow. It supports communication with tools like Slack, the Google communication suite, git based repositories like github and Bit-Bucket, automation tools like Jenkins, ticketing systems like Jira and so many others. By galvanizing these tools through one cohesive UI, ISD improves visibility for the entire team and allows each individual member to know the health of their application. In addition to this, ISD offers a scalable policy enforcement system by using the Open Policy engine allowing for greater enforcement of organizational policies at larger scales. Automate key stages of pipelines: Integrating tools is just the beginning. Using OpsMx\u2019s Data and Intelligence module, you can use artificial intelligence to make optimal decisions without relying on human intervention. For example if you are performing a log analysis, comparing the old version of the software and new versions of a software, the artificial intelligence will automatically calculate the risk of the deployment and decide whether to deploy or not all without needing a human to intervene in the process. Make more informed decisions: As the saying goes, \u201cWhat gets measured gets managed.\u201d ISD provides users key insights into their application health including data such as the fastest pipeline, the slowest pipeline, any errors encountered. This enables a more centralized and detailed view of your application health. In addition to this, when manual decisions are required ISD automatically gathers information from relevant sources so that the user making the decision does not need to look for that information and can make a faster decision. Whether you use Argo or another CD platform, the Data and Intelligence module AKA, Autopilot, is available stand alone.","title":"OpsMx Intelligent Software Delivery Platform"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#opsmx-intelligent-software-delivery-platform","text":"","title":"OpsMx Intelligent Software Delivery Platform"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#opsmx-isd","text":"OpsMx\u2019s ISD is designed to help release software faster, with fewer errors and with minimal human intervention to create a better end customer experience and free up time and Manpower for businesses to scale and Innovate. ISD allows you to do the following: Build Flexible deployment pipelines for multiple cloud environments Increase compliance and communication across your development and operations teams Automate key stages of pipelines Make more informed decisions","title":"OpsMx ISD"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#build-flexible-deployment-pipelines-for-multiple-cloud-environments","text":"Using ISD\u2019s Orchestration Module, OpsMx builds off of Spinnaker, the premier open source multi cloud deployment solution, by providing users with extra layers of data and information to make better decisions. For example, Spinnaker does not have clear distinctions between the application and the various services and microservices that make up that application. ISD however allows users to easily see the various services and microservices that make up each application and the pipelines that make up each individual service and microservice. This allows you to easier see dependencies between service pipelines and as a result help you optimize your workflow. Whether used as an On-prem or a Managed SaaS solution, the orchestration module offers a host of other features like: Self Service onboarding: ISD allows users to serve themselves whether it is adding a new tool, cluster or pipeline, ISD allows users to serve themselves. Pipelines as code: While Spinnaker gives users visual representations of your pipelines so that you can see how your deployment stages might playout, ISD allows you to maintain your pipelines as JSON files which allows you to easily store them as, modify them and repurpose them using any Git-based repository, saving your team time and your business money. Infrastructure as code: As customers demand more from their CI/CD tools, the infrastructure has to be able to scale to meet those requirements. ISD allows you to use tools like Terraform to have your infrastructure like Servers available as code. This allows you to easily scale your application and, as a result, your business without having to worry as much about infrastructure costs.","title":"Build Flexible deployment pipelines for multiple cloud environments:"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#increase-compliance-and-communication-across-your-development-and-operations-teams","text":"Using our Pluggable data layer, ISD supports over 40+ integrations with various tools that cover each and every stage of software development and operation no matter your team size or work flow. It supports communication with tools like Slack, the Google communication suite, git based repositories like github and Bit-Bucket, automation tools like Jenkins, ticketing systems like Jira and so many others. By galvanizing these tools through one cohesive UI, ISD improves visibility for the entire team and allows each individual member to know the health of their application. In addition to this, ISD offers a scalable policy enforcement system by using the Open Policy engine allowing for greater enforcement of organizational policies at larger scales.","title":"Increase compliance and communication across your development and operations teams:"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#automate-key-stages-of-pipelines","text":"Integrating tools is just the beginning. Using OpsMx\u2019s Data and Intelligence module, you can use artificial intelligence to make optimal decisions without relying on human intervention. For example if you are performing a log analysis, comparing the old version of the software and new versions of a software, the artificial intelligence will automatically calculate the risk of the deployment and decide whether to deploy or not all without needing a human to intervene in the process.","title":"Automate key stages of pipelines:"},{"location":"OpsMx%20Intelligent%20Software%20Delivery%20Platform/#make-more-informed-decisions","text":"As the saying goes, \u201cWhat gets measured gets managed.\u201d ISD provides users key insights into their application health including data such as the fastest pipeline, the slowest pipeline, any errors encountered. This enables a more centralized and detailed view of your application health. In addition to this, when manual decisions are required ISD automatically gathers information from relevant sources so that the user making the decision does not need to look for that information and can make a faster decision. Whether you use Argo or another CD platform, the Data and Intelligence module AKA, Autopilot, is available stand alone.","title":"Make more informed decisions:"}]}